<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kvstore on PMem.io</title><link>https://pmem.io/blogs/kvstore/</link><description>Recent content in kvstore on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 10 Sep 2015 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/kvstore/index.xml" rel="self" type="application/rss+xml"/><item><title>KV-store improved &amp; measured</title><link>https://pmem.io/blog/2015/09/kv-store-improved-measured/</link><pubDate>Thu, 10 Sep 2015 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2015/09/kv-store-improved-measured/</guid><description>As promised in the previous post about the kv-store implementation I&amp;rsquo;m back with new results after implementing the optimizations I devised a month ago. As a bonus I implemented a red-black tree to have a fair comparison between two data structures that allocate similar number of nodes.
tl;dr: I was right about crit-bit :)
Test platform The same server was used to run the benchmarks but with the latest 4.2 kernel that contains numerous DAX improvements.</description></item><item><title>Transactional key-value store using libpmemobj - DIY</title><link>https://pmem.io/blog/2015/07/transactional-key-value-store-using-libpmemobj-diy/</link><pubDate>Fri, 31 Jul 2015 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2015/07/transactional-key-value-store-using-libpmemobj-diy/</guid><description>Our library often gets compared to NoSQL databases because it stores things on storage in unstructured manner. Which is true, but, when you think about it, the pmemobj library is not technically a database, but can be used to implement one - like the MySQL storage engine example. In this post I&amp;rsquo;ll describe an example implementation of transactional kv-store, that has two different backends, which I&amp;rsquo;ll then compare. To make things more interesting, it&amp;rsquo;s not going to be your typical kv-store, since the data structure behind it won&amp;rsquo;t be a hashmap.</description></item></channel></rss>