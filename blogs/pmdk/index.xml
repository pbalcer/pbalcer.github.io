<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMDK on PMem.io</title><link>https://pmem.io/blogs/pmdk/</link><description>Recent content in PMDK on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 20 Aug 2020 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/pmdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Static code analysis of the PMDK</title><link>https://pmem.io/blog/2020/08/static-code-analysis-of-the-pmdk/</link><pubDate>Thu, 20 Aug 2020 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2020/08/static-code-analysis-of-the-pmdk/</guid><description>Introduction In the PMDK team, we focus on the quality of our codebase. One of the standard practices in the software development is a static code analysis, which improves the overall project quality and fixes bugs in the early stage of development. Since there is no silver bullet for avoiding bugs, we already use two different static analysis tools and many runtime checkers e.g. valgrind. Improving static analysis effectiveness is a separate academic problem.</description></item><item><title>New release of PMDK</title><link>https://pmem.io/blog/2019/10/new-release-of-pmdk/</link><pubDate>Fri, 11 Oct 2019 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2019/10/new-release-of-pmdk/</guid><description>If you are following our mailing group, you&amp;rsquo;ve probably noticed a stream of release announcements for libraries that are a part of PMDK. Here&amp;rsquo;s a recap of the most important new features and additions.
libpmemkv 1.0 The primary goal of PMDK is enabling adoption of Persistent Memory. We do so by creating the building blocks that applications can utilize to support PMEM. So far, our work was mostly concentrated on important base functionality such as memory allocation or transactions, and only recently we&amp;rsquo;ve started to build on that foundation with C++ containers - making persistent memory programming easier and easier.</description></item><item><title>Pool conversion tool</title><link>https://pmem.io/blog/2019/02/pool-conversion-tool/</link><pubDate>Fri, 01 Feb 2019 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2019/02/pool-conversion-tool/</guid><description>Introduction When we published the first PMDK stable release, we committed to maintaining stable on-media layout. This means that all future PMDK changes have to be backward compatible. Unfortunately, we weren&amp;rsquo;t successful in adhering to the strict requirements which would be needed to maintain compatibility, mostly because we made changes whose benefit far outweighed the costs. For this reason, we created the pmempool convert command. This tool was used to convert pools which were created with old PMDK versions to the newer on-media layout.</description></item><item><title>New release of PMDK</title><link>https://pmem.io/blog/2018/10/new-release-of-pmdk/</link><pubDate>Mon, 22 Oct 2018 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2018/10/new-release-of-pmdk/</guid><description>We&amp;rsquo;ve been very quiet on this blog as of late, mostly because of the amount of work that we needed to put into our very ambitiously planned 1.5 release. But we&amp;rsquo;ve made it, and there&amp;rsquo;s finally time to get back to discussing the technical minutiae of our work. In this post, we will go over the major library changes that have been introduced in 1.5.
Release planning in the open But first, I&amp;rsquo;d like to highlight a change to our release planning process.</description></item><item><title>Announcing the Persistent Memory Development Kit</title><link>https://pmem.io/blog/2017/12/announcing-the-persistent-memory-development-kit/</link><pubDate>Mon, 11 Dec 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/12/announcing-the-persistent-memory-development-kit/</guid><description>This is to announce a name change: The NVML project is now known as PMDK, the Persistent Memory Development Kit.
Why the name change? The old name, NVML, made it sound like the project produced a single library that applied to Non-Volatile Memory. In reality, the project currently supports ten libraries, targeted at various use cases for persistent memory, along with language support for C, C++, Java, and Python, tools like the pmemcheck plug-in for valgrind, and an increasing body of documentation, code examples, tutorials, and blog entries.</description></item><item><title>PMDK for Windows</title><link>https://pmem.io/blog/2016/12/pmdk-for-windows/</link><pubDate>Wed, 21 Dec 2016 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2016/12/pmdk-for-windows/</guid><description>Throughout 2016 a team of engineers from Microsoft, Intel, HPE and HPI have been working to port the PMDK project to Windows and we are happy to announce that Technical Preview release is now available!
Our main goal in porting the library was to make it as easy as possible for developers to use the library in both Linux and Windows environments. To meet this goal, we focused on these elements as we undertook the effort:</description></item></channel></rss>