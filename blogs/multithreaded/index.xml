<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>multithreaded on PMem.io</title><link>https://pmem.io/blogs/multithreaded/</link><description>Recent content in multithreaded on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 16 Sep 2015 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/multithreaded/index.xml" rel="self" type="application/rss+xml"/><item><title>Challenges of multi-threaded transactions</title><link>https://pmem.io/blog/2015/09/challenges-of-multi-threaded-transactions/</link><pubDate>Wed, 16 Sep 2015 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2015/09/challenges-of-multi-threaded-transactions/</guid><description>Our library currently does not support threads cooperating (writing) within a single transaction. It does shift a lot of work from the library onto the user who now has to think about different parallelization solutions.
This was a conscious decision with iterative approach to creating the library in mind. It was far easier to implement the current transaction support strategy and say that it works with relatively good performance than it would be to implement multi-threaded transactions straight up and say that they work and scale linearly with CPUs thrown at them (yea right).</description></item></channel></rss>