<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libpmemobj-cpp on PMem.io</title><link>https://pmem.io/blogs/libpmemobj-cpp/</link><description>Recent content in Libpmemobj-cpp on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 30 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://pmem.io/blogs/libpmemobj-cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>Libpmemobj-cpp - lessons learned</title><link>https://pmem.io/blog/2021/09/libpmemobj-cpp-lessons-learned/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate><guid>https://pmem.io/blog/2021/09/libpmemobj-cpp-lessons-learned/</guid><description>Introduction We&amp;rsquo;ve been working on C++ bindings for libpmemobj since around 2016 - see our very first tutorial for libpmemobj-cpp. We&amp;rsquo;ve come a long way since then. A lot has changed - we&amp;rsquo;ve gained more experience and knowledge, added new features, fixed quite a few bugs, and created at least half a dozen new containers. It&amp;rsquo;s fair to state this product is now far more mature and well-developed. Over time, we&amp;rsquo;ve learned at least several lessons about designing and overcoming issues in C++ applications for persistent memory.</description></item></channel></rss>