<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LLPL on PMem.io</title><link>https://pmem.io/blogs/llpl/</link><description>Recent content in LLPL on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 27 May 2020 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/llpl/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to LLPL</title><link>https://pmem.io/blog/2020/05/introduction-to-llpl/</link><pubDate>Wed, 27 May 2020 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2020/05/introduction-to-llpl/</guid><description>There are several ways to program with persistent memory from Java. A recent pmem.io blog article described the pmemkv library, a persistent key-value store, which can be used from multiple languages. For Java, pmemkv supports three ubiquitous Java types: String, byte[], and ByteBuffer.
Another PMDK component, the Low-Level Persistence Library (LLPL) is an open source Java library (https://github.com/pmem/llpl) that gives Java developers access to persistent memory in a very fast and flexible way.</description></item></channel></rss>