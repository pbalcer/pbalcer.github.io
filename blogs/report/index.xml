<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Report on PMem.io</title><link>https://pmem.io/blogs/report/</link><description>Recent content in Report on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 05 Oct 2017 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/report/index.xml" rel="self" type="application/rss+xml"/><item><title>Progress Report Q3 2017</title><link>https://pmem.io/blog/2017/10/progress-report-q3-2017/</link><pubDate>Thu, 05 Oct 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/10/progress-report-q3-2017/</guid><description>The last quarter was rather&amp;hellip; peaceful. But nevertheless there were a few noteworthy things.
FreeBSD &amp;amp; ARM We always asserted that our library is multi-platform and hardware agnostic&amp;hellip; as long as your platform is a recent distribution of Linux (or Windows) on x86 hardware :)
Two things happened that intend to change the current status quo:
There&amp;rsquo;s an active and ongoing effort of porting the linux-specific parts of the library to FreeBSD, mostly led by @gaweinbergi.</description></item><item><title>Progress Report Q2 2017</title><link>https://pmem.io/blog/2017/07/progress-report-q2-2017/</link><pubDate>Tue, 04 Jul 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/07/progress-report-q2-2017/</guid><description>It&amp;rsquo;s summer already (at least in my hemisphere) ! :) And it&amp;rsquo;s time for the next progress report.
Control interface After a very long in the oven, we&amp;rsquo;ve finally finalized and merged the CTL API which allows for introspection and modification of the internal state of the library.
This feature has been shaped after the mallctl() available in jemalloc.
The way it works is very simple. Developer defines a function-like entry point, decides whether or not the entry point allows for reading, writing or both, and finally specifies the argument type.</description></item><item><title>Progress Report Q1 2017</title><link>https://pmem.io/blog/2017/03/progress-report-q1-2017/</link><pubDate>Wed, 29 Mar 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/03/progress-report-q1-2017/</guid><description>It&amp;rsquo;s been three months already since the last time I wrote something ;) Time really flies by quickly when you are doing interesting stuff.
We&amp;rsquo;ve been very busy with lots of improvements to the library as well as A LOT of tiny fixes: over the last three months the team eliminated virtually every bug found by various static analysis tools and valgrind.
But no-one wants to hear about that, so here&amp;rsquo;s the meaty stuff:</description></item><item><title>What's coming in libpmemobj</title><link>https://pmem.io/blog/2017/01/whats-coming-in-libpmemobj/</link><pubDate>Wed, 25 Jan 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/01/whats-coming-in-libpmemobj/</guid><description>In my last post I&amp;rsquo;ve made a promise to share our plans for the near future. So here it is: 4 ideas that we are planning to ship with the upcoming version of libpmemobj.
Please note that most of our plans related to libpmemobj are available on our github issues page with the &amp;ldquo;Feature&amp;rdquo; label. Feel free to join the discussion!
Reserve/Initialize/Publish work-flow Many of persistent memory programming models proposed by researchers [1, 2] provide a different transactional semantics compared to libpmemobj.</description></item></channel></rss>