<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containers on PMem.io</title><link>https://pmem.io/blogs/containers/</link><description>Recent content in Containers on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 10 Jul 2017 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/containers/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Standard Library Containers with Persistent Memory</title><link>https://pmem.io/blog/2017/07/using-standard-library-containers-with-persistent-memory/</link><pubDate>Mon, 10 Jul 2017 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2017/07/using-standard-library-containers-with-persistent-memory/</guid><description>Introduction Somewhere along the road, when we were doing the C++ bindings for libpmemobj, we found the need for some kind of containers. We were faced with two viable solutions: write everything from scratch or adapt an existing implementation. The obvious choice was NOT to implement from scratch. We would have to implement at least the basic containers from the C++ standard: vector, list, set, map and their multi- companions. That would be a lot of work, not to mention the testing and maintenance effort.</description></item></channel></rss>