<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMDK on PMem.io</title><link>https://pmem.io/announcements/pmdk/</link><description>Recent content in PMDK on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 24 Sep 2021 19:54:24 +0000</lastBuildDate><atom:link href="https://pmem.io/announcements/pmdk/index.xml" rel="self" type="application/rss+xml"/><item><title>PMDK Bugfix Releases</title><link>https://pmem.io/announcements/2021/pmdk-bugfix-releases/</link><pubDate>Fri, 24 Sep 2021 19:54:24 +0000</pubDate><guid>https://pmem.io/announcements/2021/pmdk-bugfix-releases/</guid><description>All,
I&amp;rsquo;m pleased to announce three bugfix releases of PMDK,
You can find source code and ChangeLogs on the following pages:
https://github.com/pmem/pmdk/releases/tag/1.11.1 https://github.com/pmem/pmdk/releases/tag/1.10.1 https://github.com/pmem/pmdk/releases/tag/1.9.3 The major highlight of this release is a fix for a missing sfence in non-temporal version of memcpy function. Here you can find details about this issue: https://github.com/pmem/pmdk/issues/5292
Łukasz Plewa</description></item><item><title>PMDK v1.11.0 Release</title><link>https://pmem.io/announcements/2021/pmdk-v1-11-0-release/</link><pubDate>Fri, 02 Jul 2021 20:17:04 +0000</pubDate><guid>https://pmem.io/announcements/2021/pmdk-v1-11-0-release/</guid><description>We&amp;rsquo;ve just released a new version of PMDK. I&amp;rsquo;d like to thank everyone who contributed. You can see the list of notable changes below:
This release:
Adds new APIs for libpmem2, most notably there are new functions to shrink and extend an existing reservation and a new iterator API for mappings contained within an existing reservation. There&amp;rsquo;s also a new function to retrieve a numa node for a source. Makes the pmemobj_open() and pmemobj_close() functions from libpmemobj thread-safe, making it easier to correctly manage persistent memory pools in a parallel environment.</description></item><item><title>PMDK v1.10.0 Release</title><link>https://pmem.io/announcements/2020/pmdk-1-10-0-release/</link><pubDate>Wed, 28 Oct 2020 20:28:48 +0000</pubDate><guid>https://pmem.io/announcements/2020/pmdk-1-10-0-release/</guid><description>Hi all,
I just wanted to share with everyone that we&amp;rsquo;ve just released PMDK Version 1.10. Alongside the usual small fixes and improvements, this release stabilizes the API for something we&amp;rsquo;ve been working on for months now: libpmem2.
As the name suggests, it&amp;rsquo;s the next major version of the libpmem library. This library has an entirely new, but familiar API that addresses many shortcomings of the previous version while retaining all of its functionality.</description></item><item><title>libpmemobj-cpp v1.11 Release</title><link>https://pmem.io/announcements/2020/libpmemobj-cpp-1-11-release/</link><pubDate>Wed, 30 Sep 2020 20:40:40 +0000</pubDate><guid>https://pmem.io/announcements/2020/libpmemobj-cpp-1-11-release/</guid><description>Hello Community,
I’m pleased to announce that libpmemobj-cpp 1.11 has been released and is available from our GitHub pages.
This release introduces a new experimental container - persistent radix_tree along with inline_string and string_view classes.
It also introduces a new pointer type: self_relative_ptr with std::atomic specialization.
New features:
experimental radix_tree container (single-threaded sorted map) experimental inline_string class (class serves a similar purpose to pmem::obj::string, but keeps the data within the same allocation as inline_string itself) string_view class (support for compilers older than C++17) experimental self_relative_ptr and std::atomic&amp;lt;self_relative_ptr&amp;gt; specialization (persistent smart ptr which encapsulates the self offseted pointer and provides member access, dereference and array access operators - for some workloads it could be a faster alternative for persistent_ptr) Optimizations:</description></item></channel></rss>